// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

use crate::{
    crypto::StaticPublicKey,
    i2np::HopRole,
    primitives::{MessageId, RouterId, TunnelId},
    tunnel::{hop::pending::PendingTunnelHop, noise::NoiseContext},
};

use alloc::vec::Vec;

use bytes::Bytes;
pub use inbound::InboundTunnel;
pub use pending::PendingTunnel;

#[derive(Debug)]
pub struct OutboundTunnel {}

pub struct OutboundTunnelBuilder {
    /// Tunnel ID.
    tunnel_id: TunnelId,
}

impl OutboundTunnelBuilder {
    pub fn new(tunnel_id: TunnelId) -> Self {
        Self { tunnel_id }
    }

    pub fn with_hop(self, _hop: PendingTunnelHop) -> Self {
        self
    }

    pub fn build(self) -> OutboundTunnel {
        OutboundTunnel {}
    }
}

mod inbound;
mod pending;

/// Tunnel build parameters.
pub struct TunnelBuildParameters {
    /// Tunnel hops.
    // TODO: introduce proper tunnel hop type?
    pub hops: Vec<(Bytes, StaticPublicKey)>,

    /// Noise context.
    pub noise: NoiseContext,

    /// Message ID used in the build message.
    pub message_id: MessageId,

    /// ID of the created endpoint/gateway.
    ///
    /// Tunnel creator (tunnel pool) selects the ID of the tunnel endpoint/gateway they
    /// created but rest of the hops will get assigned a random tunnel ID generated by
    /// [`InboundTunnel`]/[`OutboundTunnel`].
    pub tunnel_id: TunnelId,

    /// Local router hash.
    pub our_hash: Bytes,
}
